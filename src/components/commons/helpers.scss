@import "~mathsass";

@mixin flat-long-shadow( // Implements flat shadow in parents ::after element.
                        // All parent parameters must have same units
    $parent-width,
    $parent-height,
    $parent-border-radius,
    $shadow-length,
    $shadow-angle, // from top border
    $shadow-opacity
    ){
    transform-style: preserve-3d;
    &::after {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;

        $diagonal: sqrt(pow(strip-unit($parent-width), 2) + pow(strip-unit($parent-height), 2)) * ($parent-width * 0 + 1);
        $diagonal-angle: atan($parent-width / $parent-height);
        $d-cos: cos($diagonal-angle);
        $d-sin: sin($diagonal-angle);
        $d-tan: tan($diagonal-angle);
        $magic-delta: 1 - 1/$d-tan;
        $magic-inner-distance: sqrt(pow($magic-delta, 2) * (pow($d-cos, 2) - 1) + 1) - $magic-delta * $d-cos;
        $magic-outer-distance: 1/$d-sin - $magic-inner-distance;
        $outer-distance: $magic-outer-distance * $parent-border-radius;
        height: calc( #{$diagonal} - #{$outer-distance * 2});
        transform-origin: top left;
        width: $shadow-length;

        transform:
            translateZ(-1px)
            translateX($parent-width - $outer-distance * $d-cos)
translateY($outer-distance * $d-sin)
            rotate(#{$diagonal-angle}rad)
            skewY(#{unitless-rad($shadow-angle) - $diagonal-angle}rad);

        background-image: linear-gradient(-90deg, rgba(0,0,0,0) 0%, #000 100%);;
        opacity: $shadow-opacity;
    }
}
